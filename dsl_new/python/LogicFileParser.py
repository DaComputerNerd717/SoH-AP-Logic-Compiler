# Generated from LogicFileParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,89,1064,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,4,0,131,8,
        0,11,0,12,0,132,4,0,135,8,0,11,0,12,0,136,1,0,1,0,1,1,1,1,1,1,1,
        1,5,1,145,8,1,10,1,12,1,148,9,1,1,1,1,1,5,1,152,8,1,10,1,12,1,155,
        9,1,1,1,1,1,5,1,159,8,1,10,1,12,1,162,9,1,1,2,1,2,1,2,1,2,5,2,168,
        8,2,10,2,12,2,171,9,2,1,3,1,3,1,3,1,3,1,3,5,3,178,8,3,10,3,12,3,
        181,9,3,1,3,1,3,5,3,185,8,3,10,3,12,3,188,9,3,1,3,1,3,5,3,192,8,
        3,10,3,12,3,195,9,3,1,3,1,3,5,3,199,8,3,10,3,12,3,202,9,3,1,3,3,
        3,205,8,3,1,4,5,4,208,8,4,10,4,12,4,211,9,4,1,4,1,4,3,4,215,8,4,
        1,5,1,5,1,5,1,5,1,5,5,5,222,8,5,10,5,12,5,225,9,5,1,5,1,5,5,5,229,
        8,5,10,5,12,5,232,9,5,1,5,1,5,1,5,5,5,237,8,5,10,5,12,5,240,9,5,
        1,5,3,5,243,8,5,1,6,1,6,5,6,247,8,6,10,6,12,6,250,9,6,1,6,1,6,5,
        6,254,8,6,10,6,12,6,257,9,6,1,6,1,6,5,6,261,8,6,10,6,12,6,264,9,
        6,1,6,1,6,5,6,268,8,6,10,6,12,6,271,9,6,1,7,1,7,1,7,3,7,276,8,7,
        1,7,5,7,279,8,7,10,7,12,7,282,9,7,1,7,1,7,5,7,286,8,7,10,7,12,7,
        289,9,7,1,7,1,7,5,7,293,8,7,10,7,12,7,296,9,7,1,7,1,7,5,7,300,8,
        7,10,7,12,7,303,9,7,1,8,1,8,1,8,1,9,1,9,4,9,310,8,9,11,9,12,9,311,
        1,10,1,10,1,10,3,10,317,8,10,1,10,1,10,4,10,321,8,10,11,10,12,10,
        322,1,10,1,10,4,10,327,8,10,11,10,12,10,328,3,10,331,8,10,1,11,1,
        11,1,11,4,11,336,8,11,11,11,12,11,337,1,11,1,11,4,11,342,8,11,11,
        11,12,11,343,1,12,1,12,1,12,1,12,5,12,350,8,12,10,12,12,12,353,9,
        12,5,12,355,8,12,10,12,12,12,358,9,12,3,12,360,8,12,1,13,1,13,1,
        13,1,13,3,13,366,8,13,3,13,368,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
        3,14,376,8,14,1,14,5,14,379,8,14,10,14,12,14,382,9,14,1,14,1,14,
        5,14,386,8,14,10,14,12,14,389,9,14,1,14,1,14,5,14,393,8,14,10,14,
        12,14,396,9,14,1,14,1,14,5,14,400,8,14,10,14,12,14,403,9,14,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
        1,19,3,19,420,8,19,1,19,5,19,423,8,19,10,19,12,19,426,9,19,1,19,
        1,19,5,19,430,8,19,10,19,12,19,433,9,19,1,19,1,19,1,19,1,19,3,19,
        439,8,19,1,19,4,19,442,8,19,11,19,12,19,443,4,19,446,8,19,11,19,
        12,19,447,1,19,5,19,451,8,19,10,19,12,19,454,9,19,1,19,1,19,5,19,
        458,8,19,10,19,12,19,461,9,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,22,1,23,1,23,1,23,3,23,475,8,23,1,23,5,23,478,8,23,10,23,
        12,23,481,9,23,1,23,1,23,5,23,485,8,23,10,23,12,23,488,9,23,1,23,
        1,23,1,23,1,23,1,23,1,23,3,23,496,8,23,1,23,4,23,499,8,23,11,23,
        12,23,500,4,23,503,8,23,11,23,12,23,504,1,23,1,23,1,24,1,24,1,24,
        3,24,512,8,24,1,24,5,24,515,8,24,10,24,12,24,518,9,24,1,24,1,24,
        5,24,522,8,24,10,24,12,24,525,9,24,1,24,1,24,1,24,1,24,1,24,3,24,
        532,8,24,1,24,4,24,535,8,24,11,24,12,24,536,4,24,539,8,24,11,24,
        12,24,540,1,24,1,24,1,25,1,25,3,25,547,8,25,1,25,1,25,1,25,1,26,
        1,26,1,26,3,26,555,8,26,1,26,5,26,558,8,26,10,26,12,26,561,9,26,
        1,26,1,26,5,26,565,8,26,10,26,12,26,568,9,26,1,26,1,26,1,26,1,26,
        1,26,3,26,575,8,26,1,26,4,26,578,8,26,11,26,12,26,579,4,26,582,8,
        26,11,26,12,26,583,1,26,1,26,1,27,1,27,3,27,590,8,27,1,27,5,27,593,
        8,27,10,27,12,27,596,9,27,1,27,1,27,5,27,600,8,27,10,27,12,27,603,
        9,27,1,27,1,27,1,27,3,27,608,8,27,1,27,4,27,611,8,27,11,27,12,27,
        612,4,27,615,8,27,11,27,12,27,616,1,27,1,27,1,28,1,28,3,28,623,8,
        28,1,28,5,28,626,8,28,10,28,12,28,629,9,28,1,28,1,28,5,28,633,8,
        28,10,28,12,28,636,9,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,3,28,647,8,28,1,28,4,28,650,8,28,11,28,12,28,651,4,28,654,8,
        28,11,28,12,28,655,1,28,1,28,1,29,1,29,1,29,1,29,3,29,664,8,29,1,
        29,5,29,667,8,29,10,29,12,29,670,9,29,1,29,1,29,5,29,674,8,29,10,
        29,12,29,677,9,29,1,29,1,29,1,29,1,29,5,29,683,8,29,10,29,12,29,
        686,9,29,3,29,688,8,29,1,29,5,29,691,8,29,10,29,12,29,694,9,29,1,
        29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,706,8,31,1,
        31,5,31,709,8,31,10,31,12,31,712,9,31,1,31,1,31,5,31,716,8,31,10,
        31,12,31,719,9,31,1,31,1,31,1,31,1,31,3,31,725,8,31,1,31,5,31,728,
        8,31,10,31,12,31,731,9,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,739,
        8,32,1,32,5,32,742,8,32,10,32,12,32,745,9,32,1,32,1,32,5,32,749,
        8,32,10,32,12,32,752,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        5,32,762,8,32,10,32,12,32,765,9,32,1,32,1,32,1,33,1,33,1,33,1,33,
        1,34,1,34,1,34,1,34,3,34,777,8,34,1,34,5,34,780,8,34,10,34,12,34,
        783,9,34,1,34,1,34,5,34,787,8,34,10,34,12,34,790,9,34,1,34,1,34,
        1,34,1,34,5,34,796,8,34,10,34,12,34,799,9,34,3,34,801,8,34,1,34,
        5,34,804,8,34,10,34,12,34,807,9,34,1,34,1,34,1,35,1,35,1,35,1,35,
        3,35,815,8,35,1,35,5,35,818,8,35,10,35,12,35,821,9,35,1,35,1,35,
        5,35,825,8,35,10,35,12,35,828,9,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,
        1,38,1,38,1,38,1,38,3,38,853,8,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,5,38,906,8,38,10,38,12,38,909,9,38,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,3,39,927,8,39,1,40,1,40,3,40,931,8,40,1,40,1,40,3,
        40,935,8,40,1,41,1,41,1,41,5,41,940,8,41,10,41,12,41,943,9,41,3,
        41,945,8,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,
        44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,
        47,3,47,971,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,980,8,48,
        1,48,1,48,1,49,1,49,1,49,1,49,1,49,3,49,989,8,49,1,49,1,49,1,50,
        1,50,1,50,1,50,1,50,3,50,998,8,50,1,50,1,50,1,51,1,51,1,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,
        1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        1031,8,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,
        1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,3,62,1055,
        8,62,1,62,4,62,1058,8,62,11,62,12,62,1059,3,62,1062,8,62,1,62,0,
        1,76,63,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,0,0,1182,0,134,1,0,0,0,2,140,1,0,0,0,4,163,1,0,0,0,6,172,
        1,0,0,0,8,209,1,0,0,0,10,216,1,0,0,0,12,244,1,0,0,0,14,272,1,0,0,
        0,16,304,1,0,0,0,18,309,1,0,0,0,20,313,1,0,0,0,22,332,1,0,0,0,24,
        359,1,0,0,0,26,361,1,0,0,0,28,369,1,0,0,0,30,404,1,0,0,0,32,407,
        1,0,0,0,34,410,1,0,0,0,36,413,1,0,0,0,38,416,1,0,0,0,40,462,1,0,
        0,0,42,465,1,0,0,0,44,468,1,0,0,0,46,471,1,0,0,0,48,508,1,0,0,0,
        50,544,1,0,0,0,52,551,1,0,0,0,54,587,1,0,0,0,56,620,1,0,0,0,58,659,
        1,0,0,0,60,697,1,0,0,0,62,701,1,0,0,0,64,734,1,0,0,0,66,768,1,0,
        0,0,68,772,1,0,0,0,70,810,1,0,0,0,72,838,1,0,0,0,74,842,1,0,0,0,
        76,852,1,0,0,0,78,926,1,0,0,0,80,930,1,0,0,0,82,944,1,0,0,0,84,946,
        1,0,0,0,86,949,1,0,0,0,88,955,1,0,0,0,90,958,1,0,0,0,92,962,1,0,
        0,0,94,965,1,0,0,0,96,974,1,0,0,0,98,983,1,0,0,0,100,992,1,0,0,0,
        102,1001,1,0,0,0,104,1006,1,0,0,0,106,1011,1,0,0,0,108,1016,1,0,
        0,0,110,1030,1,0,0,0,112,1032,1,0,0,0,114,1036,1,0,0,0,116,1040,
        1,0,0,0,118,1043,1,0,0,0,120,1046,1,0,0,0,122,1049,1,0,0,0,124,1061,
        1,0,0,0,126,135,3,54,27,0,127,135,3,56,28,0,128,135,3,2,1,0,129,
        131,5,57,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,
        133,1,0,0,0,133,135,1,0,0,0,134,126,1,0,0,0,134,127,1,0,0,0,134,
        128,1,0,0,0,134,130,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,
        137,1,0,0,0,137,138,1,0,0,0,138,139,5,0,0,1,139,1,1,0,0,0,140,141,
        5,8,0,0,141,142,5,88,0,0,142,146,5,9,0,0,143,145,5,57,0,0,144,143,
        1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,
        1,0,0,0,148,146,1,0,0,0,149,153,3,4,2,0,150,152,5,57,0,0,151,150,
        1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,
        1,0,0,0,155,153,1,0,0,0,156,160,5,10,0,0,157,159,5,57,0,0,158,157,
        1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,3,1,
        0,0,0,162,160,1,0,0,0,163,169,5,88,0,0,164,165,3,124,62,0,165,166,
        5,88,0,0,166,168,1,0,0,0,167,164,1,0,0,0,168,171,1,0,0,0,169,167,
        1,0,0,0,169,170,1,0,0,0,170,5,1,0,0,0,171,169,1,0,0,0,172,173,5,
        50,0,0,173,174,5,11,0,0,174,175,3,76,38,0,175,179,5,12,0,0,176,178,
        5,57,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,
        1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,186,5,9,0,0,183,185,
        5,57,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,
        1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,193,3,76,38,0,190,192,
        5,57,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,
        1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,200,5,10,0,0,197,199,
        5,57,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,
        1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,203,205,3,8,4,0,204,203,
        1,0,0,0,204,205,1,0,0,0,205,7,1,0,0,0,206,208,5,57,0,0,207,206,1,
        0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,214,1,
        0,0,0,211,209,1,0,0,0,212,215,3,12,6,0,213,215,3,10,5,0,214,212,
        1,0,0,0,214,213,1,0,0,0,215,9,1,0,0,0,216,217,5,51,0,0,217,218,5,
        11,0,0,218,219,3,76,38,0,219,223,5,12,0,0,220,222,5,57,0,0,221,220,
        1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,
        1,0,0,0,225,223,1,0,0,0,226,230,5,9,0,0,227,229,5,57,0,0,228,227,
        1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,
        1,0,0,0,232,230,1,0,0,0,233,234,3,76,38,0,234,238,5,10,0,0,235,237,
        5,57,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,
        1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,241,243,3,8,4,0,242,241,
        1,0,0,0,242,243,1,0,0,0,243,11,1,0,0,0,244,248,5,52,0,0,245,247,
        5,57,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,
        1,0,0,0,249,251,1,0,0,0,250,248,1,0,0,0,251,255,5,9,0,0,252,254,
        5,57,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,
        1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,262,3,76,38,0,259,261,
        5,57,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,
        1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,269,5,10,0,0,266,268,
        5,57,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,
        1,0,0,0,270,13,1,0,0,0,271,269,1,0,0,0,272,273,5,53,0,0,273,275,
        3,76,38,0,274,276,3,16,8,0,275,274,1,0,0,0,275,276,1,0,0,0,276,280,
        1,0,0,0,277,279,5,57,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,
        1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,0,283,287,
        5,9,0,0,284,286,5,57,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,
        1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,294,
        3,18,9,0,291,293,5,57,0,0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,
        1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,294,1,0,0,0,297,301,
        5,10,0,0,298,300,5,57,0,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,
        1,0,0,0,301,302,1,0,0,0,302,15,1,0,0,0,303,301,1,0,0,0,304,305,5,
        56,0,0,305,306,5,3,0,0,306,17,1,0,0,0,307,310,3,20,10,0,308,310,
        3,22,11,0,309,307,1,0,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,
        1,0,0,0,311,312,1,0,0,0,312,19,1,0,0,0,313,316,5,54,0,0,314,317,
        3,110,55,0,315,317,5,88,0,0,316,314,1,0,0,0,316,315,1,0,0,0,317,
        318,1,0,0,0,318,320,5,89,0,0,319,321,5,57,0,0,320,319,1,0,0,0,321,
        322,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,330,1,0,0,0,324,
        326,3,76,38,0,325,327,5,57,0,0,326,325,1,0,0,0,327,328,1,0,0,0,328,
        326,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,324,1,0,0,0,330,
        331,1,0,0,0,331,21,1,0,0,0,332,333,5,55,0,0,333,335,5,89,0,0,334,
        336,5,57,0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,
        338,1,0,0,0,338,339,1,0,0,0,339,341,3,76,38,0,340,342,5,57,0,0,341,
        340,1,0,0,0,342,343,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,
        23,1,0,0,0,345,356,3,26,13,0,346,347,5,13,0,0,347,351,3,26,13,0,
        348,350,5,57,0,0,349,348,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,
        351,352,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,354,346,1,0,0,0,
        355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,360,1,0,0,0,
        358,356,1,0,0,0,359,345,1,0,0,0,359,360,1,0,0,0,360,25,1,0,0,0,361,
        367,5,88,0,0,362,365,5,31,0,0,363,366,3,76,38,0,364,366,5,88,0,0,
        365,363,1,0,0,0,365,364,1,0,0,0,366,368,1,0,0,0,367,362,1,0,0,0,
        367,368,1,0,0,0,368,27,1,0,0,0,369,370,5,59,0,0,370,371,5,88,0,0,
        371,372,5,11,0,0,372,373,3,24,12,0,373,375,5,12,0,0,374,376,5,89,
        0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,380,1,0,0,0,377,379,5,57,
        0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,
        0,0,381,383,1,0,0,0,382,380,1,0,0,0,383,387,5,9,0,0,384,386,5,57,
        0,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,
        0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,394,3,76,38,0,391,393,5,
        57,0,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,
        0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,401,5,10,0,0,398,400,5,
        57,0,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,
        0,0,0,402,29,1,0,0,0,403,401,1,0,0,0,404,405,5,60,0,0,405,406,3,
        76,38,0,406,31,1,0,0,0,407,408,5,61,0,0,408,409,5,88,0,0,409,33,
        1,0,0,0,410,411,5,62,0,0,411,412,5,7,0,0,412,35,1,0,0,0,413,414,
        5,63,0,0,414,415,5,64,0,0,415,37,1,0,0,0,416,417,5,65,0,0,417,419,
        5,88,0,0,418,420,5,89,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,424,
        1,0,0,0,421,423,5,57,0,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,
        1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,424,1,0,0,0,427,431,
        5,9,0,0,428,430,5,57,0,0,429,428,1,0,0,0,430,433,1,0,0,0,431,429,
        1,0,0,0,431,432,1,0,0,0,432,445,1,0,0,0,433,431,1,0,0,0,434,439,
        3,32,16,0,435,439,3,34,17,0,436,439,3,36,18,0,437,439,3,30,15,0,
        438,434,1,0,0,0,438,435,1,0,0,0,438,436,1,0,0,0,438,437,1,0,0,0,
        439,441,1,0,0,0,440,442,5,57,0,0,441,440,1,0,0,0,442,443,1,0,0,0,
        443,441,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,438,1,0,0,0,
        446,447,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,452,1,0,0,0,
        449,451,5,57,0,0,450,449,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,
        452,453,1,0,0,0,453,455,1,0,0,0,454,452,1,0,0,0,455,459,5,10,0,0,
        456,458,5,57,0,0,457,456,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,
        459,460,1,0,0,0,460,39,1,0,0,0,461,459,1,0,0,0,462,463,5,66,0,0,
        463,464,3,76,38,0,464,41,1,0,0,0,465,466,5,67,0,0,466,467,3,76,38,
        0,467,43,1,0,0,0,468,469,5,68,0,0,469,470,5,88,0,0,470,45,1,0,0,
        0,471,472,5,71,0,0,472,474,5,88,0,0,473,475,5,89,0,0,474,473,1,0,
        0,0,474,475,1,0,0,0,475,479,1,0,0,0,476,478,5,57,0,0,477,476,1,0,
        0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,482,1,0,
        0,0,481,479,1,0,0,0,482,486,5,9,0,0,483,485,5,57,0,0,484,483,1,0,
        0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,502,1,0,
        0,0,488,486,1,0,0,0,489,496,3,34,17,0,490,496,3,40,20,0,491,496,
        3,42,21,0,492,496,3,44,22,0,493,496,5,70,0,0,494,496,5,69,0,0,495,
        489,1,0,0,0,495,490,1,0,0,0,495,491,1,0,0,0,495,492,1,0,0,0,495,
        493,1,0,0,0,495,494,1,0,0,0,496,498,1,0,0,0,497,499,5,57,0,0,498,
        497,1,0,0,0,499,500,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,
        503,1,0,0,0,502,495,1,0,0,0,503,504,1,0,0,0,504,502,1,0,0,0,504,
        505,1,0,0,0,505,506,1,0,0,0,506,507,5,10,0,0,507,47,1,0,0,0,508,
        509,5,73,0,0,509,511,5,88,0,0,510,512,5,89,0,0,511,510,1,0,0,0,511,
        512,1,0,0,0,512,516,1,0,0,0,513,515,5,57,0,0,514,513,1,0,0,0,515,
        518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,
        516,1,0,0,0,519,523,5,9,0,0,520,522,5,57,0,0,521,520,1,0,0,0,522,
        525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,538,1,0,0,0,525,
        523,1,0,0,0,526,532,3,34,17,0,527,532,3,42,21,0,528,532,5,72,0,0,
        529,532,3,42,21,0,530,532,3,40,20,0,531,526,1,0,0,0,531,527,1,0,
        0,0,531,528,1,0,0,0,531,529,1,0,0,0,531,530,1,0,0,0,532,534,1,0,
        0,0,533,535,5,57,0,0,534,533,1,0,0,0,535,536,1,0,0,0,536,534,1,0,
        0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,531,1,0,0,0,539,540,1,0,
        0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,5,10,
        0,0,543,49,1,0,0,0,544,546,5,74,0,0,545,547,5,88,0,0,546,545,1,0,
        0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,5,89,0,0,549,550,3,76,
        38,0,550,51,1,0,0,0,551,552,5,75,0,0,552,554,5,88,0,0,553,555,5,
        89,0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,559,1,0,0,0,556,558,5,
        57,0,0,557,556,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,
        0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,566,5,9,0,0,563,565,5,
        57,0,0,564,563,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,
        0,0,0,567,581,1,0,0,0,568,566,1,0,0,0,569,575,3,34,17,0,570,575,
        3,48,24,0,571,575,3,46,23,0,572,575,3,50,25,0,573,575,3,40,20,0,
        574,569,1,0,0,0,574,570,1,0,0,0,574,571,1,0,0,0,574,572,1,0,0,0,
        574,573,1,0,0,0,575,577,1,0,0,0,576,578,5,57,0,0,577,576,1,0,0,0,
        578,579,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,
        581,574,1,0,0,0,582,583,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,
        584,585,1,0,0,0,585,586,5,10,0,0,586,53,1,0,0,0,587,589,5,76,0,0,
        588,590,5,89,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,594,1,0,0,0,
        591,593,5,57,0,0,592,591,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,
        594,595,1,0,0,0,595,597,1,0,0,0,596,594,1,0,0,0,597,601,5,9,0,0,
        598,600,5,57,0,0,599,598,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,
        601,602,1,0,0,0,602,614,1,0,0,0,603,601,1,0,0,0,604,608,3,52,26,
        0,605,608,3,38,19,0,606,608,3,28,14,0,607,604,1,0,0,0,607,605,1,
        0,0,0,607,606,1,0,0,0,608,610,1,0,0,0,609,611,5,57,0,0,610,609,1,
        0,0,0,611,612,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,615,1,
        0,0,0,614,607,1,0,0,0,615,616,1,0,0,0,616,614,1,0,0,0,616,617,1,
        0,0,0,617,618,1,0,0,0,618,619,5,10,0,0,619,55,1,0,0,0,620,622,5,
        77,0,0,621,623,5,89,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,627,
        1,0,0,0,624,626,5,57,0,0,625,624,1,0,0,0,626,629,1,0,0,0,627,625,
        1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,627,1,0,0,0,630,634,
        5,9,0,0,631,633,5,57,0,0,632,631,1,0,0,0,633,636,1,0,0,0,634,632,
        1,0,0,0,634,635,1,0,0,0,635,653,1,0,0,0,636,634,1,0,0,0,637,647,
        3,58,29,0,638,647,3,64,32,0,639,647,3,62,31,0,640,647,3,70,35,0,
        641,647,3,68,34,0,642,647,3,66,33,0,643,647,3,72,36,0,644,647,3,
        60,30,0,645,647,3,74,37,0,646,637,1,0,0,0,646,638,1,0,0,0,646,639,
        1,0,0,0,646,640,1,0,0,0,646,641,1,0,0,0,646,642,1,0,0,0,646,643,
        1,0,0,0,646,644,1,0,0,0,646,645,1,0,0,0,647,649,1,0,0,0,648,650,
        5,57,0,0,649,648,1,0,0,0,650,651,1,0,0,0,651,649,1,0,0,0,651,652,
        1,0,0,0,652,654,1,0,0,0,653,646,1,0,0,0,654,655,1,0,0,0,655,653,
        1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,5,10,0,0,658,57,
        1,0,0,0,659,660,5,78,0,0,660,661,5,79,0,0,661,663,5,88,0,0,662,664,
        5,89,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,668,1,0,0,0,665,667,
        5,57,0,0,666,665,1,0,0,0,667,670,1,0,0,0,668,666,1,0,0,0,668,669,
        1,0,0,0,669,671,1,0,0,0,670,668,1,0,0,0,671,675,5,9,0,0,672,674,
        5,57,0,0,673,672,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,
        1,0,0,0,676,687,1,0,0,0,677,675,1,0,0,0,678,684,5,7,0,0,679,680,
        3,124,62,0,680,681,5,7,0,0,681,683,1,0,0,0,682,679,1,0,0,0,683,686,
        1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,688,1,0,0,0,686,684,
        1,0,0,0,687,678,1,0,0,0,687,688,1,0,0,0,688,692,1,0,0,0,689,691,
        5,57,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,
        1,0,0,0,693,695,1,0,0,0,694,692,1,0,0,0,695,696,5,10,0,0,696,59,
        1,0,0,0,697,698,5,78,0,0,698,699,5,80,0,0,699,700,5,88,0,0,700,61,
        1,0,0,0,701,702,5,78,0,0,702,703,5,81,0,0,703,705,5,88,0,0,704,706,
        5,89,0,0,705,704,1,0,0,0,705,706,1,0,0,0,706,710,1,0,0,0,707,709,
        5,57,0,0,708,707,1,0,0,0,709,712,1,0,0,0,710,708,1,0,0,0,710,711,
        1,0,0,0,711,713,1,0,0,0,712,710,1,0,0,0,713,717,5,9,0,0,714,716,
        5,57,0,0,715,714,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,
        1,0,0,0,718,724,1,0,0,0,719,717,1,0,0,0,720,721,5,6,0,0,721,722,
        3,124,62,0,722,723,5,6,0,0,723,725,1,0,0,0,724,720,1,0,0,0,724,725,
        1,0,0,0,725,729,1,0,0,0,726,728,5,57,0,0,727,726,1,0,0,0,728,731,
        1,0,0,0,729,727,1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,731,729,
        1,0,0,0,732,733,5,10,0,0,733,63,1,0,0,0,734,735,5,78,0,0,735,736,
        5,81,0,0,736,738,5,88,0,0,737,739,5,89,0,0,738,737,1,0,0,0,738,739,
        1,0,0,0,739,743,1,0,0,0,740,742,5,57,0,0,741,740,1,0,0,0,742,745,
        1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,743,
        1,0,0,0,746,750,5,9,0,0,747,749,5,57,0,0,748,747,1,0,0,0,749,752,
        1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,750,
        1,0,0,0,753,754,5,86,0,0,754,755,5,89,0,0,755,756,5,6,0,0,756,757,
        3,124,62,0,757,758,5,87,0,0,758,759,5,89,0,0,759,763,5,6,0,0,760,
        762,5,57,0,0,761,760,1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,763,
        764,1,0,0,0,764,766,1,0,0,0,765,763,1,0,0,0,766,767,5,10,0,0,767,
        65,1,0,0,0,768,769,5,78,0,0,769,770,5,82,0,0,770,771,5,88,0,0,771,
        67,1,0,0,0,772,773,5,78,0,0,773,774,5,83,0,0,774,776,5,88,0,0,775,
        777,5,89,0,0,776,775,1,0,0,0,776,777,1,0,0,0,777,781,1,0,0,0,778,
        780,5,57,0,0,779,778,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,781,
        782,1,0,0,0,782,784,1,0,0,0,783,781,1,0,0,0,784,788,5,9,0,0,785,
        787,5,57,0,0,786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,
        789,1,0,0,0,789,800,1,0,0,0,790,788,1,0,0,0,791,797,5,5,0,0,792,
        793,3,124,62,0,793,794,5,5,0,0,794,796,1,0,0,0,795,792,1,0,0,0,796,
        799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,801,1,0,0,0,799,
        797,1,0,0,0,800,791,1,0,0,0,800,801,1,0,0,0,801,805,1,0,0,0,802,
        804,5,57,0,0,803,802,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,
        806,1,0,0,0,806,808,1,0,0,0,807,805,1,0,0,0,808,809,5,10,0,0,809,
        69,1,0,0,0,810,811,5,78,0,0,811,812,5,83,0,0,812,814,5,88,0,0,813,
        815,5,89,0,0,814,813,1,0,0,0,814,815,1,0,0,0,815,819,1,0,0,0,816,
        818,5,57,0,0,817,816,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,
        820,1,0,0,0,820,822,1,0,0,0,821,819,1,0,0,0,822,826,5,9,0,0,823,
        825,5,57,0,0,824,823,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,
        827,1,0,0,0,827,829,1,0,0,0,828,826,1,0,0,0,829,830,5,86,0,0,830,
        831,5,89,0,0,831,832,5,5,0,0,832,833,3,124,62,0,833,834,5,87,0,0,
        834,835,5,89,0,0,835,836,5,5,0,0,836,837,5,10,0,0,837,71,1,0,0,0,
        838,839,5,78,0,0,839,840,5,84,0,0,840,841,5,88,0,0,841,73,1,0,0,
        0,842,843,5,78,0,0,843,844,5,85,0,0,844,845,5,88,0,0,845,75,1,0,
        0,0,846,847,6,38,-1,0,847,853,3,78,39,0,848,849,5,57,0,0,849,853,
        3,76,38,18,850,851,5,16,0,0,851,853,3,76,38,17,852,846,1,0,0,0,852,
        848,1,0,0,0,852,850,1,0,0,0,853,907,1,0,0,0,854,855,10,16,0,0,855,
        856,5,25,0,0,856,906,3,76,38,17,857,858,10,15,0,0,858,859,5,26,0,
        0,859,906,3,76,38,16,860,861,10,14,0,0,861,862,5,27,0,0,862,906,
        3,76,38,15,863,864,10,13,0,0,864,865,5,23,0,0,865,906,3,76,38,14,
        866,867,10,12,0,0,867,868,5,24,0,0,868,906,3,76,38,13,869,870,10,
        11,0,0,870,871,5,29,0,0,871,906,3,76,38,12,872,873,10,10,0,0,873,
        874,5,28,0,0,874,906,3,76,38,11,875,876,10,9,0,0,876,877,5,21,0,
        0,877,906,3,76,38,10,878,879,10,8,0,0,879,880,5,22,0,0,880,906,3,
        76,38,9,881,882,10,7,0,0,882,883,5,19,0,0,883,906,3,76,38,8,884,
        885,10,6,0,0,885,886,5,20,0,0,886,906,3,76,38,7,887,888,10,5,0,0,
        888,889,5,17,0,0,889,906,3,76,38,6,890,891,10,4,0,0,891,892,5,18,
        0,0,892,906,3,76,38,5,893,894,10,3,0,0,894,895,5,14,0,0,895,906,
        3,76,38,4,896,897,10,2,0,0,897,898,5,15,0,0,898,906,3,76,38,3,899,
        900,10,1,0,0,900,901,5,30,0,0,901,902,3,76,38,0,902,903,5,89,0,0,
        903,904,3,76,38,1,904,906,1,0,0,0,905,854,1,0,0,0,905,857,1,0,0,
        0,905,860,1,0,0,0,905,863,1,0,0,0,905,866,1,0,0,0,905,869,1,0,0,
        0,905,872,1,0,0,0,905,875,1,0,0,0,905,878,1,0,0,0,905,881,1,0,0,
        0,905,884,1,0,0,0,905,887,1,0,0,0,905,890,1,0,0,0,905,893,1,0,0,
        0,905,896,1,0,0,0,905,899,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,
        0,907,908,1,0,0,0,908,77,1,0,0,0,909,907,1,0,0,0,910,927,3,84,42,
        0,911,927,3,86,43,0,912,927,3,88,44,0,913,927,3,90,45,0,914,927,
        3,92,46,0,915,927,3,94,47,0,916,927,3,96,48,0,917,927,3,98,49,0,
        918,927,3,100,50,0,919,927,3,102,51,0,920,927,3,104,52,0,921,927,
        3,106,53,0,922,927,3,108,54,0,923,927,3,14,7,0,924,927,3,6,3,0,925,
        927,3,110,55,0,926,910,1,0,0,0,926,911,1,0,0,0,926,912,1,0,0,0,926,
        913,1,0,0,0,926,914,1,0,0,0,926,915,1,0,0,0,926,916,1,0,0,0,926,
        917,1,0,0,0,926,918,1,0,0,0,926,919,1,0,0,0,926,920,1,0,0,0,926,
        921,1,0,0,0,926,922,1,0,0,0,926,923,1,0,0,0,926,924,1,0,0,0,926,
        925,1,0,0,0,927,79,1,0,0,0,928,929,5,88,0,0,929,931,5,31,0,0,930,
        928,1,0,0,0,930,931,1,0,0,0,931,934,1,0,0,0,932,935,3,76,38,0,933,
        935,5,88,0,0,934,932,1,0,0,0,934,933,1,0,0,0,935,81,1,0,0,0,936,
        941,3,80,40,0,937,938,5,13,0,0,938,940,3,80,40,0,939,937,1,0,0,0,
        940,943,1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,945,1,0,0,0,
        943,941,1,0,0,0,944,936,1,0,0,0,944,945,1,0,0,0,945,83,1,0,0,0,946,
        947,5,33,0,0,947,948,5,88,0,0,948,85,1,0,0,0,949,950,5,34,0,0,950,
        951,5,88,0,0,951,952,5,11,0,0,952,953,3,82,41,0,953,954,5,12,0,0,
        954,87,1,0,0,0,955,956,5,35,0,0,956,957,5,88,0,0,957,89,1,0,0,0,
        958,959,5,36,0,0,959,960,5,32,0,0,960,961,5,88,0,0,961,91,1,0,0,
        0,962,963,5,37,0,0,963,964,5,88,0,0,964,93,1,0,0,0,965,966,5,38,
        0,0,966,967,5,11,0,0,967,970,5,88,0,0,968,969,5,13,0,0,969,971,5,
        4,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,972,1,0,0,0,972,973,5,
        12,0,0,973,95,1,0,0,0,974,975,5,39,0,0,975,976,5,11,0,0,976,979,
        5,88,0,0,977,978,5,13,0,0,978,980,5,4,0,0,979,977,1,0,0,0,979,980,
        1,0,0,0,980,981,1,0,0,0,981,982,5,12,0,0,982,97,1,0,0,0,983,984,
        5,40,0,0,984,985,5,11,0,0,985,988,5,88,0,0,986,987,5,13,0,0,987,
        989,5,4,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,
        991,5,12,0,0,991,99,1,0,0,0,992,993,5,41,0,0,993,994,5,11,0,0,994,
        997,5,88,0,0,995,996,5,13,0,0,996,998,3,76,38,0,997,995,1,0,0,0,
        997,998,1,0,0,0,998,999,1,0,0,0,999,1000,5,12,0,0,1000,101,1,0,0,
        0,1001,1002,5,42,0,0,1002,1003,5,11,0,0,1003,1004,5,88,0,0,1004,
        1005,5,12,0,0,1005,103,1,0,0,0,1006,1007,5,43,0,0,1007,1008,5,11,
        0,0,1008,1009,5,88,0,0,1009,1010,5,12,0,0,1010,105,1,0,0,0,1011,
        1012,5,44,0,0,1012,1013,5,11,0,0,1013,1014,3,76,38,0,1014,1015,5,
        12,0,0,1015,107,1,0,0,0,1016,1017,5,45,0,0,1017,1018,5,11,0,0,1018,
        1019,3,76,38,0,1019,1020,5,12,0,0,1020,109,1,0,0,0,1021,1031,3,112,
        56,0,1022,1031,5,3,0,0,1023,1031,5,5,0,0,1024,1031,3,114,57,0,1025,
        1031,3,116,58,0,1026,1031,3,118,59,0,1027,1031,3,120,60,0,1028,1031,
        3,122,61,0,1029,1031,5,7,0,0,1030,1021,1,0,0,0,1030,1022,1,0,0,0,
        1030,1023,1,0,0,0,1030,1024,1,0,0,0,1030,1025,1,0,0,0,1030,1026,
        1,0,0,0,1030,1027,1,0,0,0,1030,1028,1,0,0,0,1030,1029,1,0,0,0,1031,
        111,1,0,0,0,1032,1033,5,11,0,0,1033,1034,3,76,38,0,1034,1035,5,12,
        0,0,1035,113,1,0,0,0,1036,1037,5,88,0,0,1037,1038,5,89,0,0,1038,
        1039,5,88,0,0,1039,115,1,0,0,0,1040,1041,5,46,0,0,1041,1042,5,88,
        0,0,1042,117,1,0,0,0,1043,1044,5,47,0,0,1044,1045,5,88,0,0,1045,
        119,1,0,0,0,1046,1047,5,48,0,0,1047,1048,5,88,0,0,1048,121,1,0,0,
        0,1049,1050,5,49,0,0,1050,1051,5,88,0,0,1051,123,1,0,0,0,1052,1062,
        5,13,0,0,1053,1055,5,13,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,
        1055,1057,1,0,0,0,1056,1058,5,57,0,0,1057,1056,1,0,0,0,1058,1059,
        1,0,0,0,1059,1057,1,0,0,0,1059,1060,1,0,0,0,1060,1062,1,0,0,0,1061,
        1052,1,0,0,0,1061,1054,1,0,0,0,1062,125,1,0,0,0,124,132,134,136,
        146,153,160,169,179,186,193,200,204,209,214,223,230,238,242,248,
        255,262,269,275,280,287,294,301,309,311,316,322,328,330,337,343,
        351,356,359,365,367,375,380,387,394,401,419,424,431,438,443,447,
        452,459,474,479,486,495,500,504,511,516,523,531,536,540,546,554,
        559,566,574,579,583,589,594,601,607,612,616,622,627,634,646,651,
        655,663,668,675,684,687,692,705,710,717,724,729,738,743,750,763,
        776,781,788,797,800,805,814,819,826,852,905,907,926,930,934,941,
        944,970,979,988,997,1030,1054,1059,1061
    ]

class LogicFileParser ( Parser ):

    grammarFileName = "LogicFileParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'enum'", "'{'", "'}'", "'('", "')'", "','", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'!='", "'=='", "'>='", "'<='", 
                     "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'>>'", 
                     "'<<'", "'?'", "'='", "'.'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'floor'", "'ceil'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'if'", "<INVALID>", "'else'", 
                     "'switch'", "'case'", "<INVALID>", "'yields '", "<INVALID>", 
                     "<INVALID>", "'helper'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'item '", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'entrance'", "<INVALID>", "'location'", "'event'", 
                     "'region'", "'logic'", "'options'", "'option'", "'strings'", 
                     "'string'", "'ints'", "'int'", "'floats'", "'float'", 
                     "'bool'", "'min'", "'max'", "<INVALID>", "':'" ]

    symbolicNames = [ "<INVALID>", "Comment", "MLComment", "Bool", "Age", 
                      "SignedNumber", "SignedInt", "EscapedString", "EnumDecPrefix", 
                      "OBkt", "CBkt", "OPar", "CPar", "Comma", "OrSymbol", 
                      "AndSymbol", "NotSymbol", "NeqSymbol", "EqSymbol", 
                      "GeqSymbol", "LeqSymbol", "LeSymbol", "GrSymbol", 
                      "AddSymbol", "SubSymbol", "MulSymbol", "DivSymbol", 
                      "ModSymbol", "RSSymbol", "LSSymbol", "Question", "ArgAssign", 
                      "Dot", "OptionCheckKW", "HelperCallKW", "ArgCheckKW", 
                      "LogicValCheckKW", "EventCheckKW", "CanReachLocKW", 
                      "CanReachEntranceKW", "CanReachRegionKW", "HasItemKW", 
                      "CountItemKW", "IsMQDungeonKW", "FloorKW", "CeilKW", 
                      "EntranceRefKW", "RegionRefKW", "LocRefKW", "ItemRefKW", 
                      "IfPrefix", "ElseIfPrefix", "ElsePrefix", "SwitchPrefix", 
                      "SwitchCaseKW", "SwitchDefaultKW", "SwitchReturnsKW", 
                      "EOL", "WS", "HelperPrefix", "QuantityPrefix", "LogicValSetPrefix", 
                      "NamePrefix", "ClassPrefix", "Classification", "ItemDefPrefix", 
                      "PresentWhenPrefix", "RulePrefix", "DestPrefix", "CantCrossChild", 
                      "CantCrossAdult", "EntranceDefPrefix", "LocClassDef", 
                      "LocationPrefix", "EventDefPrefix", "RegionDefPrefix", 
                      "LogicPrefix", "OptionsDefPrefix", "OptionPrefix", 
                      "StringsPrefix", "StringPrefix", "IntsPrefix", "IntPrefix", 
                      "FloatsPrefix", "FloatPrefix", "BoolPrefix", "MinKW", 
                      "MaxKW", "Ident", "Colon" ]

    RULE_fileDef = 0
    RULE_enumDef = 1
    RULE_enumVals = 2
    RULE_ifBlock = 3
    RULE_ifContinuation = 4
    RULE_elseIfBlock = 5
    RULE_elseBlock = 6
    RULE_switchExpr = 7
    RULE_return_case = 8
    RULE_caseList = 9
    RULE_caseDef = 10
    RULE_defaultCase = 11
    RULE_args = 12
    RULE_arg = 13
    RULE_helperDef = 14
    RULE_quantityDef = 15
    RULE_logicValSet = 16
    RULE_nameDef = 17
    RULE_classificationDef = 18
    RULE_itemDef = 19
    RULE_presentWhenDef = 20
    RULE_ruleDef = 21
    RULE_destDef = 22
    RULE_entranceDef = 23
    RULE_locationDef = 24
    RULE_eventDef = 25
    RULE_regionDef = 26
    RULE_logicDef = 27
    RULE_optionsDef = 28
    RULE_optionDefStrings = 29
    RULE_optionDefString = 30
    RULE_optionDefIntList = 31
    RULE_optionDefIntRange = 32
    RULE_optionDefInt = 33
    RULE_optionDefFloatList = 34
    RULE_optionDefFloatRange = 35
    RULE_optionDefFloat = 36
    RULE_optionDefBool = 37
    RULE_expr = 38
    RULE_basefunc = 39
    RULE_arg_pass = 40
    RULE_args_pass = 41
    RULE_optionCheck = 42
    RULE_helperCall = 43
    RULE_argCheck = 44
    RULE_logicValCheck = 45
    RULE_eventCheck = 46
    RULE_canReachLocCall = 47
    RULE_canReachEntranceCall = 48
    RULE_canReachRegionCall = 49
    RULE_hasItemCall = 50
    RULE_countItemCall = 51
    RULE_isDungeonMqCall = 52
    RULE_floorCall = 53
    RULE_ceilCall = 54
    RULE_value = 55
    RULE_parenExpr = 56
    RULE_enumValueRef = 57
    RULE_entranceRef = 58
    RULE_regionRef = 59
    RULE_locRef = 60
    RULE_itemRef = 61
    RULE_listSeparator = 62

    ruleNames =  [ "fileDef", "enumDef", "enumVals", "ifBlock", "ifContinuation", 
                   "elseIfBlock", "elseBlock", "switchExpr", "return_case", 
                   "caseList", "caseDef", "defaultCase", "args", "arg", 
                   "helperDef", "quantityDef", "logicValSet", "nameDef", 
                   "classificationDef", "itemDef", "presentWhenDef", "ruleDef", 
                   "destDef", "entranceDef", "locationDef", "eventDef", 
                   "regionDef", "logicDef", "optionsDef", "optionDefStrings", 
                   "optionDefString", "optionDefIntList", "optionDefIntRange", 
                   "optionDefInt", "optionDefFloatList", "optionDefFloatRange", 
                   "optionDefFloat", "optionDefBool", "expr", "basefunc", 
                   "arg_pass", "args_pass", "optionCheck", "helperCall", 
                   "argCheck", "logicValCheck", "eventCheck", "canReachLocCall", 
                   "canReachEntranceCall", "canReachRegionCall", "hasItemCall", 
                   "countItemCall", "isDungeonMqCall", "floorCall", "ceilCall", 
                   "value", "parenExpr", "enumValueRef", "entranceRef", 
                   "regionRef", "locRef", "itemRef", "listSeparator" ]

    EOF = Token.EOF
    Comment=1
    MLComment=2
    Bool=3
    Age=4
    SignedNumber=5
    SignedInt=6
    EscapedString=7
    EnumDecPrefix=8
    OBkt=9
    CBkt=10
    OPar=11
    CPar=12
    Comma=13
    OrSymbol=14
    AndSymbol=15
    NotSymbol=16
    NeqSymbol=17
    EqSymbol=18
    GeqSymbol=19
    LeqSymbol=20
    LeSymbol=21
    GrSymbol=22
    AddSymbol=23
    SubSymbol=24
    MulSymbol=25
    DivSymbol=26
    ModSymbol=27
    RSSymbol=28
    LSSymbol=29
    Question=30
    ArgAssign=31
    Dot=32
    OptionCheckKW=33
    HelperCallKW=34
    ArgCheckKW=35
    LogicValCheckKW=36
    EventCheckKW=37
    CanReachLocKW=38
    CanReachEntranceKW=39
    CanReachRegionKW=40
    HasItemKW=41
    CountItemKW=42
    IsMQDungeonKW=43
    FloorKW=44
    CeilKW=45
    EntranceRefKW=46
    RegionRefKW=47
    LocRefKW=48
    ItemRefKW=49
    IfPrefix=50
    ElseIfPrefix=51
    ElsePrefix=52
    SwitchPrefix=53
    SwitchCaseKW=54
    SwitchDefaultKW=55
    SwitchReturnsKW=56
    EOL=57
    WS=58
    HelperPrefix=59
    QuantityPrefix=60
    LogicValSetPrefix=61
    NamePrefix=62
    ClassPrefix=63
    Classification=64
    ItemDefPrefix=65
    PresentWhenPrefix=66
    RulePrefix=67
    DestPrefix=68
    CantCrossChild=69
    CantCrossAdult=70
    EntranceDefPrefix=71
    LocClassDef=72
    LocationPrefix=73
    EventDefPrefix=74
    RegionDefPrefix=75
    LogicPrefix=76
    OptionsDefPrefix=77
    OptionPrefix=78
    StringsPrefix=79
    StringPrefix=80
    IntsPrefix=81
    IntPrefix=82
    FloatsPrefix=83
    FloatPrefix=84
    BoolPrefix=85
    MinKW=86
    MaxKW=87
    Ident=88
    Colon=89

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FileDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(LogicFileParser.EOF, 0)

        def logicDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.LogicDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.LogicDefContext,i)


        def optionsDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionsDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionsDefContext,i)


        def enumDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.EnumDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.EnumDefContext,i)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_fileDef




    def fileDef(self):

        localctx = LogicFileParser.FileDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fileDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 134
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [76]:
                    self.state = 126
                    self.logicDef()
                    pass
                elif token in [77]:
                    self.state = 127
                    self.optionsDef()
                    pass
                elif token in [8]:
                    self.state = 128
                    self.enumDef()
                    pass
                elif token in [57]:
                    self.state = 130 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 129
                            self.match(LogicFileParser.EOL)

                        else:
                            raise NoViableAltException(self)
                        self.state = 132 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 136 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==8 or _la==57 or _la==76 or _la==77):
                    break

            self.state = 138
            self.match(LogicFileParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EnumDecPrefix(self):
            return self.getToken(LogicFileParser.EnumDecPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def enumVals(self):
            return self.getTypedRuleContext(LogicFileParser.EnumValsContext,0)


        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_enumDef




    def enumDef(self):

        localctx = LogicFileParser.EnumDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_enumDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 140
            self.match(LogicFileParser.EnumDecPrefix)
            self.state = 141
            self.match(LogicFileParser.Ident)
            self.state = 142
            self.match(LogicFileParser.OBkt)
            self.state = 146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 143
                self.match(LogicFileParser.EOL)
                self.state = 148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 149
            self.enumVals()
            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 150
                self.match(LogicFileParser.EOL)
                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 156
            self.match(LogicFileParser.CBkt)
            self.state = 160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 157
                    self.match(LogicFileParser.EOL) 
                self.state = 162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.Ident)
            else:
                return self.getToken(LogicFileParser.Ident, i)

        def listSeparator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ListSeparatorContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ListSeparatorContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_enumVals




    def enumVals(self):

        localctx = LogicFileParser.EnumValsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enumVals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self.match(LogicFileParser.Ident)
            self.state = 169
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 164
                    self.listSeparator()
                    self.state = 165
                    self.match(LogicFileParser.Ident) 
                self.state = 171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IfPrefix(self):
            return self.getToken(LogicFileParser.IfPrefix, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)


        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def ifContinuation(self):
            return self.getTypedRuleContext(LogicFileParser.IfContinuationContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_ifBlock




    def ifBlock(self):

        localctx = LogicFileParser.IfBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_ifBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(LogicFileParser.IfPrefix)
            self.state = 173
            self.match(LogicFileParser.OPar)
            self.state = 174
            self.expr(0)
            self.state = 175
            self.match(LogicFileParser.CPar)
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 176
                self.match(LogicFileParser.EOL)
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 182
            self.match(LogicFileParser.OBkt)
            self.state = 186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 183
                    self.match(LogicFileParser.EOL) 
                self.state = 188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 189
            self.expr(0)
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 190
                self.match(LogicFileParser.EOL)
                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 196
            self.match(LogicFileParser.CBkt)
            self.state = 200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 197
                    self.match(LogicFileParser.EOL) 
                self.state = 202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 203
                self.ifContinuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfContinuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elseBlock(self):
            return self.getTypedRuleContext(LogicFileParser.ElseBlockContext,0)


        def elseIfBlock(self):
            return self.getTypedRuleContext(LogicFileParser.ElseIfBlockContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_ifContinuation




    def ifContinuation(self):

        localctx = LogicFileParser.IfContinuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ifContinuation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 206
                self.match(LogicFileParser.EOL)
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.state = 212
                self.elseBlock()
                pass
            elif token in [51]:
                self.state = 213
                self.elseIfBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIfPrefix(self):
            return self.getToken(LogicFileParser.ElseIfPrefix, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)


        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def ifContinuation(self):
            return self.getTypedRuleContext(LogicFileParser.IfContinuationContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_elseIfBlock




    def elseIfBlock(self):

        localctx = LogicFileParser.ElseIfBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_elseIfBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(LogicFileParser.ElseIfPrefix)
            self.state = 217
            self.match(LogicFileParser.OPar)
            self.state = 218
            self.expr(0)
            self.state = 219
            self.match(LogicFileParser.CPar)
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 220
                self.match(LogicFileParser.EOL)
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 226
            self.match(LogicFileParser.OBkt)
            self.state = 230
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 227
                    self.match(LogicFileParser.EOL) 
                self.state = 232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 233
            self.expr(0)
            self.state = 234
            self.match(LogicFileParser.CBkt)
            self.state = 238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 235
                    self.match(LogicFileParser.EOL) 
                self.state = 240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 241
                self.ifContinuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElsePrefix(self):
            return self.getToken(LogicFileParser.ElsePrefix, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_elseBlock




    def elseBlock(self):

        localctx = LogicFileParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_elseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(LogicFileParser.ElsePrefix)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 245
                self.match(LogicFileParser.EOL)
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 251
            self.match(LogicFileParser.OBkt)
            self.state = 255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 252
                    self.match(LogicFileParser.EOL) 
                self.state = 257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

            self.state = 258
            self.expr(0)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 259
                self.match(LogicFileParser.EOL)
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 265
            self.match(LogicFileParser.CBkt)
            self.state = 269
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 266
                    self.match(LogicFileParser.EOL) 
                self.state = 271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SwitchPrefix(self):
            return self.getToken(LogicFileParser.SwitchPrefix, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def caseList(self):
            return self.getTypedRuleContext(LogicFileParser.CaseListContext,0)


        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def return_case(self):
            return self.getTypedRuleContext(LogicFileParser.Return_caseContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_switchExpr




    def switchExpr(self):

        localctx = LogicFileParser.SwitchExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_switchExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(LogicFileParser.SwitchPrefix)
            self.state = 273
            self.expr(0)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 274
                self.return_case()


            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 277
                self.match(LogicFileParser.EOL)
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 283
            self.match(LogicFileParser.OBkt)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 284
                self.match(LogicFileParser.EOL)
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 290
            self.caseList()
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 291
                self.match(LogicFileParser.EOL)
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 297
            self.match(LogicFileParser.CBkt)
            self.state = 301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 298
                    self.match(LogicFileParser.EOL) 
                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SwitchReturnsKW(self):
            return self.getToken(LogicFileParser.SwitchReturnsKW, 0)

        def Bool(self):
            return self.getToken(LogicFileParser.Bool, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_return_case




    def return_case(self):

        localctx = LogicFileParser.Return_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_return_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.match(LogicFileParser.SwitchReturnsKW)
            self.state = 305
            self.match(LogicFileParser.Bool)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.CaseDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.CaseDefContext,i)


        def defaultCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.DefaultCaseContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.DefaultCaseContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_caseList




    def caseList(self):

        localctx = LogicFileParser.CaseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_caseList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 309
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54]:
                    self.state = 307
                    self.caseDef()
                    pass
                elif token in [55]:
                    self.state = 308
                    self.defaultCase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 311 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==54 or _la==55):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SwitchCaseKW(self):
            return self.getToken(LogicFileParser.SwitchCaseKW, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def value(self):
            return self.getTypedRuleContext(LogicFileParser.ValueContext,0)


        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_caseDef




    def caseDef(self):

        localctx = LogicFileParser.CaseDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_caseDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(LogicFileParser.SwitchCaseKW)
            self.state = 316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 314
                self.value()
                pass

            elif la_ == 2:
                self.state = 315
                self.match(LogicFileParser.Ident)
                pass


            self.state = 318
            self.match(LogicFileParser.Colon)
            self.state = 320 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 319
                    self.match(LogicFileParser.EOL)

                else:
                    raise NoViableAltException(self)
                self.state = 322 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 324
                self.expr(0)
                self.state = 326 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 325
                        self.match(LogicFileParser.EOL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 328 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SwitchDefaultKW(self):
            return self.getToken(LogicFileParser.SwitchDefaultKW, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_defaultCase




    def defaultCase(self):

        localctx = LogicFileParser.DefaultCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_defaultCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(LogicFileParser.SwitchDefaultKW)
            self.state = 333
            self.match(LogicFileParser.Colon)
            self.state = 335 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 334
                    self.match(LogicFileParser.EOL)

                else:
                    raise NoViableAltException(self)
                self.state = 337 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 339
            self.expr(0)
            self.state = 341 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 340
                    self.match(LogicFileParser.EOL)

                else:
                    raise NoViableAltException(self)
                self.state = 343 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ArgContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ArgContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.Comma)
            else:
                return self.getToken(LogicFileParser.Comma, i)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_args




    def args(self):

        localctx = LogicFileParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 345
                self.arg()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13:
                    self.state = 346
                    self.match(LogicFileParser.Comma)
                    self.state = 347
                    self.arg()
                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==57:
                        self.state = 348
                        self.match(LogicFileParser.EOL)
                        self.state = 353
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.Ident)
            else:
                return self.getToken(LogicFileParser.Ident, i)

        def ArgAssign(self):
            return self.getToken(LogicFileParser.ArgAssign, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_arg




    def arg(self):

        localctx = LogicFileParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(LogicFileParser.Ident)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 362
                self.match(LogicFileParser.ArgAssign)
                self.state = 365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 363
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 364
                    self.match(LogicFileParser.Ident)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelperDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HelperPrefix(self):
            return self.getToken(LogicFileParser.HelperPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def args(self):
            return self.getTypedRuleContext(LogicFileParser.ArgsContext,0)


        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_helperDef




    def helperDef(self):

        localctx = LogicFileParser.HelperDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_helperDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(LogicFileParser.HelperPrefix)
            self.state = 370
            self.match(LogicFileParser.Ident)
            self.state = 371
            self.match(LogicFileParser.OPar)
            self.state = 372
            self.args()
            self.state = 373
            self.match(LogicFileParser.CPar)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 374
                self.match(LogicFileParser.Colon)


            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 377
                self.match(LogicFileParser.EOL)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 383
            self.match(LogicFileParser.OBkt)
            self.state = 387
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 384
                    self.match(LogicFileParser.EOL) 
                self.state = 389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 390
            self.expr(0)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 391
                self.match(LogicFileParser.EOL)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 397
            self.match(LogicFileParser.CBkt)
            self.state = 401
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 398
                    self.match(LogicFileParser.EOL) 
                self.state = 403
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantityDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QuantityPrefix(self):
            return self.getToken(LogicFileParser.QuantityPrefix, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_quantityDef




    def quantityDef(self):

        localctx = LogicFileParser.QuantityDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_quantityDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(LogicFileParser.QuantityPrefix)
            self.state = 405
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicValSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicValSetPrefix(self):
            return self.getToken(LogicFileParser.LogicValSetPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_logicValSet




    def logicValSet(self):

        localctx = LogicFileParser.LogicValSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_logicValSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(LogicFileParser.LogicValSetPrefix)
            self.state = 408
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NamePrefix(self):
            return self.getToken(LogicFileParser.NamePrefix, 0)

        def EscapedString(self):
            return self.getToken(LogicFileParser.EscapedString, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_nameDef




    def nameDef(self):

        localctx = LogicFileParser.NameDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_nameDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(LogicFileParser.NamePrefix)
            self.state = 411
            self.match(LogicFileParser.EscapedString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassificationDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ClassPrefix(self):
            return self.getToken(LogicFileParser.ClassPrefix, 0)

        def Classification(self):
            return self.getToken(LogicFileParser.Classification, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_classificationDef




    def classificationDef(self):

        localctx = LogicFileParser.ClassificationDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classificationDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(LogicFileParser.ClassPrefix)
            self.state = 414
            self.match(LogicFileParser.Classification)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ItemDefPrefix(self):
            return self.getToken(LogicFileParser.ItemDefPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def logicValSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.LogicValSetContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.LogicValSetContext,i)


        def nameDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.NameDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.NameDefContext,i)


        def classificationDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ClassificationDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ClassificationDefContext,i)


        def quantityDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.QuantityDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.QuantityDefContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_itemDef




    def itemDef(self):

        localctx = LogicFileParser.ItemDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_itemDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(LogicFileParser.ItemDefPrefix)
            self.state = 417
            self.match(LogicFileParser.Ident)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 418
                self.match(LogicFileParser.Colon)


            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 421
                self.match(LogicFileParser.EOL)
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 427
            self.match(LogicFileParser.OBkt)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 428
                self.match(LogicFileParser.EOL)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 445 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 438
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [61]:
                    self.state = 434
                    self.logicValSet()
                    pass
                elif token in [62]:
                    self.state = 435
                    self.nameDef()
                    pass
                elif token in [63]:
                    self.state = 436
                    self.classificationDef()
                    pass
                elif token in [60]:
                    self.state = 437
                    self.quantityDef()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 441 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 440
                        self.match(LogicFileParser.EOL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 443 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                self.state = 447 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606846976) != 0)):
                    break

            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 449
                self.match(LogicFileParser.EOL)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 455
            self.match(LogicFileParser.CBkt)
            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 456
                    self.match(LogicFileParser.EOL) 
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PresentWhenDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PresentWhenPrefix(self):
            return self.getToken(LogicFileParser.PresentWhenPrefix, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_presentWhenDef




    def presentWhenDef(self):

        localctx = LogicFileParser.PresentWhenDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_presentWhenDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(LogicFileParser.PresentWhenPrefix)
            self.state = 463
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RulePrefix(self):
            return self.getToken(LogicFileParser.RulePrefix, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_ruleDef




    def ruleDef(self):

        localctx = LogicFileParser.RuleDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_ruleDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(LogicFileParser.RulePrefix)
            self.state = 466
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DestPrefix(self):
            return self.getToken(LogicFileParser.DestPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_destDef




    def destDef(self):

        localctx = LogicFileParser.DestDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_destDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(LogicFileParser.DestPrefix)
            self.state = 469
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntranceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EntranceDefPrefix(self):
            return self.getToken(LogicFileParser.EntranceDefPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def nameDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.NameDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.NameDefContext,i)


        def presentWhenDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.PresentWhenDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.PresentWhenDefContext,i)


        def ruleDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.RuleDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.RuleDefContext,i)


        def destDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.DestDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.DestDefContext,i)


        def CantCrossAdult(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.CantCrossAdult)
            else:
                return self.getToken(LogicFileParser.CantCrossAdult, i)

        def CantCrossChild(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.CantCrossChild)
            else:
                return self.getToken(LogicFileParser.CantCrossChild, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_entranceDef




    def entranceDef(self):

        localctx = LogicFileParser.EntranceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_entranceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(LogicFileParser.EntranceDefPrefix)
            self.state = 472
            self.match(LogicFileParser.Ident)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 473
                self.match(LogicFileParser.Colon)


            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 476
                self.match(LogicFileParser.EOL)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 482
            self.match(LogicFileParser.OBkt)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 483
                self.match(LogicFileParser.EOL)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 502 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 495
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 489
                    self.nameDef()
                    pass
                elif token in [66]:
                    self.state = 490
                    self.presentWhenDef()
                    pass
                elif token in [67]:
                    self.state = 491
                    self.ruleDef()
                    pass
                elif token in [68]:
                    self.state = 492
                    self.destDef()
                    pass
                elif token in [70]:
                    self.state = 493
                    self.match(LogicFileParser.CantCrossAdult)
                    pass
                elif token in [69]:
                    self.state = 494
                    self.match(LogicFileParser.CantCrossChild)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 498 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 497
                    self.match(LogicFileParser.EOL)
                    self.state = 500 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==57):
                        break

                self.state = 504 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 497) != 0)):
                    break

            self.state = 506
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LocationPrefix(self):
            return self.getToken(LogicFileParser.LocationPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def nameDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.NameDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.NameDefContext,i)


        def ruleDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.RuleDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.RuleDefContext,i)


        def LocClassDef(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.LocClassDef)
            else:
                return self.getToken(LogicFileParser.LocClassDef, i)

        def presentWhenDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.PresentWhenDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.PresentWhenDefContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_locationDef




    def locationDef(self):

        localctx = LogicFileParser.LocationDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_locationDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(LogicFileParser.LocationPrefix)
            self.state = 509
            self.match(LogicFileParser.Ident)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 510
                self.match(LogicFileParser.Colon)


            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 513
                self.match(LogicFileParser.EOL)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 519
            self.match(LogicFileParser.OBkt)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 520
                self.match(LogicFileParser.EOL)
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 538 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 526
                    self.nameDef()
                    pass

                elif la_ == 2:
                    self.state = 527
                    self.ruleDef()
                    pass

                elif la_ == 3:
                    self.state = 528
                    self.match(LogicFileParser.LocClassDef)
                    pass

                elif la_ == 4:
                    self.state = 529
                    self.ruleDef()
                    pass

                elif la_ == 5:
                    self.state = 530
                    self.presentWhenDef()
                    pass


                self.state = 534 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 533
                    self.match(LogicFileParser.EOL)
                    self.state = 536 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==57):
                        break

                self.state = 540 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 1073) != 0)):
                    break

            self.state = 542
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EventDefPrefix(self):
            return self.getToken(LogicFileParser.EventDefPrefix, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_eventDef




    def eventDef(self):

        localctx = LogicFileParser.EventDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eventDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(LogicFileParser.EventDefPrefix)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 545
                self.match(LogicFileParser.Ident)


            self.state = 548
            self.match(LogicFileParser.Colon)
            self.state = 549
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RegionDefPrefix(self):
            return self.getToken(LogicFileParser.RegionDefPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def nameDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.NameDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.NameDefContext,i)


        def locationDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.LocationDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.LocationDefContext,i)


        def entranceDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.EntranceDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.EntranceDefContext,i)


        def eventDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.EventDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.EventDefContext,i)


        def presentWhenDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.PresentWhenDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.PresentWhenDefContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_regionDef




    def regionDef(self):

        localctx = LogicFileParser.RegionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_regionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(LogicFileParser.RegionDefPrefix)
            self.state = 552
            self.match(LogicFileParser.Ident)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 553
                self.match(LogicFileParser.Colon)


            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 556
                self.match(LogicFileParser.EOL)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 562
            self.match(LogicFileParser.OBkt)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 563
                self.match(LogicFileParser.EOL)
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 581 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 574
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 569
                    self.nameDef()
                    pass
                elif token in [73]:
                    self.state = 570
                    self.locationDef()
                    pass
                elif token in [71]:
                    self.state = 571
                    self.entranceDef()
                    pass
                elif token in [74]:
                    self.state = 572
                    self.eventDef()
                    pass
                elif token in [66]:
                    self.state = 573
                    self.presentWhenDef()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 577 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 576
                    self.match(LogicFileParser.EOL)
                    self.state = 579 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==57):
                        break

                self.state = 583 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 6673) != 0)):
                    break

            self.state = 585
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicPrefix(self):
            return self.getToken(LogicFileParser.LogicPrefix, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def regionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.RegionDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.RegionDefContext,i)


        def itemDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ItemDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ItemDefContext,i)


        def helperDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.HelperDefContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.HelperDefContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_logicDef




    def logicDef(self):

        localctx = LogicFileParser.LogicDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_logicDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(LogicFileParser.LogicPrefix)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 588
                self.match(LogicFileParser.Colon)


            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 591
                self.match(LogicFileParser.EOL)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 597
            self.match(LogicFileParser.OBkt)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 598
                self.match(LogicFileParser.EOL)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 614 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 607
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [75]:
                    self.state = 604
                    self.regionDef()
                    pass
                elif token in [65]:
                    self.state = 605
                    self.itemDef()
                    pass
                elif token in [59]:
                    self.state = 606
                    self.helperDef()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 610 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 609
                    self.match(LogicFileParser.EOL)
                    self.state = 612 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==57):
                        break

                self.state = 616 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 65601) != 0)):
                    break

            self.state = 618
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionsDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionsDefPrefix(self):
            return self.getToken(LogicFileParser.OptionsDefPrefix, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def optionDefStrings(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefStringsContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefStringsContext,i)


        def optionDefIntRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefIntRangeContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefIntRangeContext,i)


        def optionDefIntList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefIntListContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefIntListContext,i)


        def optionDefFloatRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefFloatRangeContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefFloatRangeContext,i)


        def optionDefFloatList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefFloatListContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefFloatListContext,i)


        def optionDefInt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefIntContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefIntContext,i)


        def optionDefFloat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefFloatContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefFloatContext,i)


        def optionDefString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefStringContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefStringContext,i)


        def optionDefBool(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.OptionDefBoolContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.OptionDefBoolContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_optionsDef




    def optionsDef(self):

        localctx = LogicFileParser.OptionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_optionsDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(LogicFileParser.OptionsDefPrefix)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 621
                self.match(LogicFileParser.Colon)


            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 624
                self.match(LogicFileParser.EOL)
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 630
            self.match(LogicFileParser.OBkt)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 631
                self.match(LogicFileParser.EOL)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 653 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 646
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 637
                    self.optionDefStrings()
                    pass

                elif la_ == 2:
                    self.state = 638
                    self.optionDefIntRange()
                    pass

                elif la_ == 3:
                    self.state = 639
                    self.optionDefIntList()
                    pass

                elif la_ == 4:
                    self.state = 640
                    self.optionDefFloatRange()
                    pass

                elif la_ == 5:
                    self.state = 641
                    self.optionDefFloatList()
                    pass

                elif la_ == 6:
                    self.state = 642
                    self.optionDefInt()
                    pass

                elif la_ == 7:
                    self.state = 643
                    self.optionDefFloat()
                    pass

                elif la_ == 8:
                    self.state = 644
                    self.optionDefString()
                    pass

                elif la_ == 9:
                    self.state = 645
                    self.optionDefBool()
                    pass


                self.state = 649 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 648
                    self.match(LogicFileParser.EOL)
                    self.state = 651 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==57):
                        break

                self.state = 655 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==78):
                    break

            self.state = 657
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefStringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def StringsPrefix(self):
            return self.getToken(LogicFileParser.StringsPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def EscapedString(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EscapedString)
            else:
                return self.getToken(LogicFileParser.EscapedString, i)

        def listSeparator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ListSeparatorContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ListSeparatorContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefStrings




    def optionDefStrings(self):

        localctx = LogicFileParser.OptionDefStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_optionDefStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(LogicFileParser.OptionPrefix)
            self.state = 660
            self.match(LogicFileParser.StringsPrefix)
            self.state = 661
            self.match(LogicFileParser.Ident)
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 662
                self.match(LogicFileParser.Colon)


            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 665
                self.match(LogicFileParser.EOL)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 671
            self.match(LogicFileParser.OBkt)
            self.state = 675
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 672
                    self.match(LogicFileParser.EOL) 
                self.state = 677
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 678
                self.match(LogicFileParser.EscapedString)
                self.state = 684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 679
                        self.listSeparator()
                        self.state = 680
                        self.match(LogicFileParser.EscapedString) 
                    self.state = 686
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)



            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 689
                self.match(LogicFileParser.EOL)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 695
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def StringPrefix(self):
            return self.getToken(LogicFileParser.StringPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefString




    def optionDefString(self):

        localctx = LogicFileParser.OptionDefStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_optionDefString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(LogicFileParser.OptionPrefix)
            self.state = 698
            self.match(LogicFileParser.StringPrefix)
            self.state = 699
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefIntListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def IntsPrefix(self):
            return self.getToken(LogicFileParser.IntsPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def SignedInt(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.SignedInt)
            else:
                return self.getToken(LogicFileParser.SignedInt, i)

        def listSeparator(self):
            return self.getTypedRuleContext(LogicFileParser.ListSeparatorContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefIntList




    def optionDefIntList(self):

        localctx = LogicFileParser.OptionDefIntListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_optionDefIntList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(LogicFileParser.OptionPrefix)
            self.state = 702
            self.match(LogicFileParser.IntsPrefix)
            self.state = 703
            self.match(LogicFileParser.Ident)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 704
                self.match(LogicFileParser.Colon)


            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 707
                self.match(LogicFileParser.EOL)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 713
            self.match(LogicFileParser.OBkt)
            self.state = 717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 714
                    self.match(LogicFileParser.EOL) 
                self.state = 719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 720
                self.match(LogicFileParser.SignedInt)

                self.state = 721
                self.listSeparator()
                self.state = 722
                self.match(LogicFileParser.SignedInt)


            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 726
                self.match(LogicFileParser.EOL)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 732
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefIntRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def IntsPrefix(self):
            return self.getToken(LogicFileParser.IntsPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def MinKW(self):
            return self.getToken(LogicFileParser.MinKW, 0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.Colon)
            else:
                return self.getToken(LogicFileParser.Colon, i)

        def SignedInt(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.SignedInt)
            else:
                return self.getToken(LogicFileParser.SignedInt, i)

        def listSeparator(self):
            return self.getTypedRuleContext(LogicFileParser.ListSeparatorContext,0)


        def MaxKW(self):
            return self.getToken(LogicFileParser.MaxKW, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefIntRange




    def optionDefIntRange(self):

        localctx = LogicFileParser.OptionDefIntRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_optionDefIntRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(LogicFileParser.OptionPrefix)
            self.state = 735
            self.match(LogicFileParser.IntsPrefix)
            self.state = 736
            self.match(LogicFileParser.Ident)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 737
                self.match(LogicFileParser.Colon)


            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 740
                self.match(LogicFileParser.EOL)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 746
            self.match(LogicFileParser.OBkt)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 747
                self.match(LogicFileParser.EOL)
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 753
            self.match(LogicFileParser.MinKW)
            self.state = 754
            self.match(LogicFileParser.Colon)
            self.state = 755
            self.match(LogicFileParser.SignedInt)
            self.state = 756
            self.listSeparator()
            self.state = 757
            self.match(LogicFileParser.MaxKW)
            self.state = 758
            self.match(LogicFileParser.Colon)
            self.state = 759
            self.match(LogicFileParser.SignedInt)
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 760
                self.match(LogicFileParser.EOL)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 766
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefIntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def IntPrefix(self):
            return self.getToken(LogicFileParser.IntPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefInt




    def optionDefInt(self):

        localctx = LogicFileParser.OptionDefIntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_optionDefInt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(LogicFileParser.OptionPrefix)
            self.state = 769
            self.match(LogicFileParser.IntPrefix)
            self.state = 770
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefFloatListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def FloatsPrefix(self):
            return self.getToken(LogicFileParser.FloatsPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def SignedNumber(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.SignedNumber)
            else:
                return self.getToken(LogicFileParser.SignedNumber, i)

        def listSeparator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ListSeparatorContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ListSeparatorContext,i)


        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefFloatList




    def optionDefFloatList(self):

        localctx = LogicFileParser.OptionDefFloatListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_optionDefFloatList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(LogicFileParser.OptionPrefix)
            self.state = 773
            self.match(LogicFileParser.FloatsPrefix)
            self.state = 774
            self.match(LogicFileParser.Ident)
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 775
                self.match(LogicFileParser.Colon)


            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 778
                self.match(LogicFileParser.EOL)
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 784
            self.match(LogicFileParser.OBkt)
            self.state = 788
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 785
                    self.match(LogicFileParser.EOL) 
                self.state = 790
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 791
                self.match(LogicFileParser.SignedNumber)
                self.state = 797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 792
                        self.listSeparator()
                        self.state = 793
                        self.match(LogicFileParser.SignedNumber) 
                    self.state = 799
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)



            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 802
                self.match(LogicFileParser.EOL)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 808
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefFloatRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def FloatsPrefix(self):
            return self.getToken(LogicFileParser.FloatsPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OBkt(self):
            return self.getToken(LogicFileParser.OBkt, 0)

        def MinKW(self):
            return self.getToken(LogicFileParser.MinKW, 0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.Colon)
            else:
                return self.getToken(LogicFileParser.Colon, i)

        def SignedNumber(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.SignedNumber)
            else:
                return self.getToken(LogicFileParser.SignedNumber, i)

        def listSeparator(self):
            return self.getTypedRuleContext(LogicFileParser.ListSeparatorContext,0)


        def MaxKW(self):
            return self.getToken(LogicFileParser.MaxKW, 0)

        def CBkt(self):
            return self.getToken(LogicFileParser.CBkt, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefFloatRange




    def optionDefFloatRange(self):

        localctx = LogicFileParser.OptionDefFloatRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_optionDefFloatRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(LogicFileParser.OptionPrefix)
            self.state = 811
            self.match(LogicFileParser.FloatsPrefix)
            self.state = 812
            self.match(LogicFileParser.Ident)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 813
                self.match(LogicFileParser.Colon)


            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 816
                self.match(LogicFileParser.EOL)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 822
            self.match(LogicFileParser.OBkt)
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 823
                self.match(LogicFileParser.EOL)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 829
            self.match(LogicFileParser.MinKW)
            self.state = 830
            self.match(LogicFileParser.Colon)
            self.state = 831
            self.match(LogicFileParser.SignedNumber)
            self.state = 832
            self.listSeparator()
            self.state = 833
            self.match(LogicFileParser.MaxKW)
            self.state = 834
            self.match(LogicFileParser.Colon)
            self.state = 835
            self.match(LogicFileParser.SignedNumber)
            self.state = 836
            self.match(LogicFileParser.CBkt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefFloatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def FloatPrefix(self):
            return self.getToken(LogicFileParser.FloatPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefFloat




    def optionDefFloat(self):

        localctx = LogicFileParser.OptionDefFloatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_optionDefFloat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(LogicFileParser.OptionPrefix)
            self.state = 839
            self.match(LogicFileParser.FloatPrefix)
            self.state = 840
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDefBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionPrefix(self):
            return self.getToken(LogicFileParser.OptionPrefix, 0)

        def BoolPrefix(self):
            return self.getToken(LogicFileParser.BoolPrefix, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_optionDefBool




    def optionDefBool(self):

        localctx = LogicFileParser.OptionDefBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_optionDefBool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(LogicFileParser.OptionPrefix)
            self.state = 843
            self.match(LogicFileParser.BoolPrefix)
            self.state = 844
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LogicFileParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SubOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def SubSymbol(self):
            return self.getToken(LogicFileParser.SubSymbol, 0)


    class LeftShiftOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def LSSymbol(self):
            return self.getToken(LogicFileParser.LSSymbol, 0)


    class GeqOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def GeqSymbol(self):
            return self.getToken(LogicFileParser.GeqSymbol, 0)


    class EqOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def EqSymbol(self):
            return self.getToken(LogicFileParser.EqSymbol, 0)


    class GrOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def GrSymbol(self):
            return self.getToken(LogicFileParser.GrSymbol, 0)


    class BaseFuncContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def basefunc(self):
            return self.getTypedRuleContext(LogicFileParser.BasefuncContext,0)



    class NeqOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def NeqSymbol(self):
            return self.getToken(LogicFileParser.NeqSymbol, 0)


    class LineSkipContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EOL(self):
            return self.getToken(LogicFileParser.EOL, 0)
        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)



    class TernaryOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def Question(self):
            return self.getToken(LogicFileParser.Question, 0)


    class AndOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def AndSymbol(self):
            return self.getToken(LogicFileParser.AndSymbol, 0)


    class DivOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def DivSymbol(self):
            return self.getToken(LogicFileParser.DivSymbol, 0)


    class OrOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def OrSymbol(self):
            return self.getToken(LogicFileParser.OrSymbol, 0)


    class AddOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def AddSymbol(self):
            return self.getToken(LogicFileParser.AddSymbol, 0)


    class LeqOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def LeqSymbol(self):
            return self.getToken(LogicFileParser.LeqSymbol, 0)


    class NotOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.prefix = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)

        def NotSymbol(self):
            return self.getToken(LogicFileParser.NotSymbol, 0)


    class RightShiftOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def RSSymbol(self):
            return self.getToken(LogicFileParser.RSSymbol, 0)


    class MulOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def MulSymbol(self):
            return self.getToken(LogicFileParser.MulSymbol, 0)


    class LeOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def LeSymbol(self):
            return self.getToken(LogicFileParser.LeSymbol, 0)


    class ModOperatorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LogicFileParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.ExprContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.ExprContext,i)

        def ModSymbol(self):
            return self.getToken(LogicFileParser.ModSymbol, 0)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LogicFileParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 7, 11, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 88]:
                localctx = LogicFileParser.BaseFuncContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 847
                self.basefunc()
                pass
            elif token in [57]:
                localctx = LogicFileParser.LineSkipContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 848
                self.match(LogicFileParser.EOL)
                self.state = 849
                self.expr(18)
                pass
            elif token in [16]:
                localctx = LogicFileParser.NotOperatorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 850
                localctx.prefix = self.match(LogicFileParser.NotSymbol)
                self.state = 851
                self.expr(17)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 905
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        localctx = LogicFileParser.MulOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 854
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 855
                        localctx.op = self.match(LogicFileParser.MulSymbol)
                        self.state = 856
                        localctx.right = self.expr(17)
                        pass

                    elif la_ == 2:
                        localctx = LogicFileParser.DivOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 857
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 858
                        localctx.op = self.match(LogicFileParser.DivSymbol)
                        self.state = 859
                        localctx.right = self.expr(16)
                        pass

                    elif la_ == 3:
                        localctx = LogicFileParser.ModOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 860
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 861
                        localctx.op = self.match(LogicFileParser.ModSymbol)
                        self.state = 862
                        localctx.right = self.expr(15)
                        pass

                    elif la_ == 4:
                        localctx = LogicFileParser.AddOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 863
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 864
                        localctx.op = self.match(LogicFileParser.AddSymbol)
                        self.state = 865
                        localctx.right = self.expr(14)
                        pass

                    elif la_ == 5:
                        localctx = LogicFileParser.SubOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 866
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 867
                        localctx.op = self.match(LogicFileParser.SubSymbol)
                        self.state = 868
                        localctx.right = self.expr(13)
                        pass

                    elif la_ == 6:
                        localctx = LogicFileParser.LeftShiftOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 869
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 870
                        localctx.op = self.match(LogicFileParser.LSSymbol)
                        self.state = 871
                        localctx.right = self.expr(12)
                        pass

                    elif la_ == 7:
                        localctx = LogicFileParser.RightShiftOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 872
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 873
                        localctx.op = self.match(LogicFileParser.RSSymbol)
                        self.state = 874
                        localctx.right = self.expr(11)
                        pass

                    elif la_ == 8:
                        localctx = LogicFileParser.LeOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 875
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 876
                        localctx.op = self.match(LogicFileParser.LeSymbol)
                        self.state = 877
                        localctx.right = self.expr(10)
                        pass

                    elif la_ == 9:
                        localctx = LogicFileParser.GrOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 878
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 879
                        localctx.op = self.match(LogicFileParser.GrSymbol)
                        self.state = 880
                        localctx.right = self.expr(9)
                        pass

                    elif la_ == 10:
                        localctx = LogicFileParser.GeqOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 881
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 882
                        localctx.op = self.match(LogicFileParser.GeqSymbol)
                        self.state = 883
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 11:
                        localctx = LogicFileParser.LeqOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 884
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 885
                        localctx.op = self.match(LogicFileParser.LeqSymbol)
                        self.state = 886
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 12:
                        localctx = LogicFileParser.NeqOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 887
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 888
                        localctx.op = self.match(LogicFileParser.NeqSymbol)
                        self.state = 889
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 13:
                        localctx = LogicFileParser.EqOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 890
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 891
                        localctx.op = self.match(LogicFileParser.EqSymbol)
                        self.state = 892
                        localctx.right = self.expr(5)
                        pass

                    elif la_ == 14:
                        localctx = LogicFileParser.OrOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 893
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 894
                        localctx.op = self.match(LogicFileParser.OrSymbol)
                        self.state = 895
                        localctx.right = self.expr(4)
                        pass

                    elif la_ == 15:
                        localctx = LogicFileParser.AndOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 896
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 897
                        localctx.op = self.match(LogicFileParser.AndSymbol)
                        self.state = 898
                        localctx.right = self.expr(3)
                        pass

                    elif la_ == 16:
                        localctx = LogicFileParser.TernaryOperatorContext(self, LogicFileParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 899
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 900
                        localctx.op = self.match(LogicFileParser.Question)
                        self.state = 901
                        localctx.right = self.expr(0)
                        self.state = 902
                        self.match(LogicFileParser.Colon)
                        self.state = 903
                        self.expr(1)
                        pass

             
                self.state = 909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasefuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionCheck(self):
            return self.getTypedRuleContext(LogicFileParser.OptionCheckContext,0)


        def helperCall(self):
            return self.getTypedRuleContext(LogicFileParser.HelperCallContext,0)


        def argCheck(self):
            return self.getTypedRuleContext(LogicFileParser.ArgCheckContext,0)


        def logicValCheck(self):
            return self.getTypedRuleContext(LogicFileParser.LogicValCheckContext,0)


        def eventCheck(self):
            return self.getTypedRuleContext(LogicFileParser.EventCheckContext,0)


        def canReachLocCall(self):
            return self.getTypedRuleContext(LogicFileParser.CanReachLocCallContext,0)


        def canReachEntranceCall(self):
            return self.getTypedRuleContext(LogicFileParser.CanReachEntranceCallContext,0)


        def canReachRegionCall(self):
            return self.getTypedRuleContext(LogicFileParser.CanReachRegionCallContext,0)


        def hasItemCall(self):
            return self.getTypedRuleContext(LogicFileParser.HasItemCallContext,0)


        def countItemCall(self):
            return self.getTypedRuleContext(LogicFileParser.CountItemCallContext,0)


        def isDungeonMqCall(self):
            return self.getTypedRuleContext(LogicFileParser.IsDungeonMqCallContext,0)


        def floorCall(self):
            return self.getTypedRuleContext(LogicFileParser.FloorCallContext,0)


        def ceilCall(self):
            return self.getTypedRuleContext(LogicFileParser.CeilCallContext,0)


        def switchExpr(self):
            return self.getTypedRuleContext(LogicFileParser.SwitchExprContext,0)


        def ifBlock(self):
            return self.getTypedRuleContext(LogicFileParser.IfBlockContext,0)


        def value(self):
            return self.getTypedRuleContext(LogicFileParser.ValueContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_basefunc




    def basefunc(self):

        localctx = LogicFileParser.BasefuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_basefunc)
        try:
            self.state = 926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.optionCheck()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.helperCall()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.argCheck()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 4)
                self.state = 913
                self.logicValCheck()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 914
                self.eventCheck()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 6)
                self.state = 915
                self.canReachLocCall()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 7)
                self.state = 916
                self.canReachEntranceCall()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 8)
                self.state = 917
                self.canReachRegionCall()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 9)
                self.state = 918
                self.hasItemCall()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 10)
                self.state = 919
                self.countItemCall()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 11)
                self.state = 920
                self.isDungeonMqCall()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 12)
                self.state = 921
                self.floorCall()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 13)
                self.state = 922
                self.ceilCall()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 14)
                self.state = 923
                self.switchExpr()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 15)
                self.state = 924
                self.ifBlock()
                pass
            elif token in [3, 5, 7, 11, 46, 47, 48, 49, 88]:
                self.enterOuterAlt(localctx, 16)
                self.state = 925
                self.value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_passContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.Ident)
            else:
                return self.getToken(LogicFileParser.Ident, i)

        def ArgAssign(self):
            return self.getToken(LogicFileParser.ArgAssign, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_arg_pass




    def arg_pass(self):

        localctx = LogicFileParser.Arg_passContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_arg_pass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 928
                self.match(LogicFileParser.Ident)
                self.state = 929
                self.match(LogicFileParser.ArgAssign)


            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 932
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 933
                self.match(LogicFileParser.Ident)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Args_passContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_pass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LogicFileParser.Arg_passContext)
            else:
                return self.getTypedRuleContext(LogicFileParser.Arg_passContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.Comma)
            else:
                return self.getToken(LogicFileParser.Comma, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_args_pass




    def args_pass(self):

        localctx = LogicFileParser.Args_passContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_args_pass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 155374178554415272) != 0) or _la==88:
                self.state = 936
                self.arg_pass()
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13:
                    self.state = 937
                    self.match(LogicFileParser.Comma)
                    self.state = 938
                    self.arg_pass()
                    self.state = 943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OptionCheckKW(self):
            return self.getToken(LogicFileParser.OptionCheckKW, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_optionCheck




    def optionCheck(self):

        localctx = LogicFileParser.OptionCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_optionCheck)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(LogicFileParser.OptionCheckKW)
            self.state = 947
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelperCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HelperCallKW(self):
            return self.getToken(LogicFileParser.HelperCallKW, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def args_pass(self):
            return self.getTypedRuleContext(LogicFileParser.Args_passContext,0)


        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_helperCall




    def helperCall(self):

        localctx = LogicFileParser.HelperCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_helperCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(LogicFileParser.HelperCallKW)
            self.state = 950
            self.match(LogicFileParser.Ident)
            self.state = 951
            self.match(LogicFileParser.OPar)
            self.state = 952
            self.args_pass()
            self.state = 953
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ArgCheckKW(self):
            return self.getToken(LogicFileParser.ArgCheckKW, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_argCheck




    def argCheck(self):

        localctx = LogicFileParser.ArgCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_argCheck)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(LogicFileParser.ArgCheckKW)
            self.state = 956
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicValCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicValCheckKW(self):
            return self.getToken(LogicFileParser.LogicValCheckKW, 0)

        def Dot(self):
            return self.getToken(LogicFileParser.Dot, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_logicValCheck




    def logicValCheck(self):

        localctx = LogicFileParser.LogicValCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_logicValCheck)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(LogicFileParser.LogicValCheckKW)
            self.state = 959
            self.match(LogicFileParser.Dot)
            self.state = 960
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EventCheckKW(self):
            return self.getToken(LogicFileParser.EventCheckKW, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_eventCheck




    def eventCheck(self):

        localctx = LogicFileParser.EventCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_eventCheck)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(LogicFileParser.EventCheckKW)
            self.state = 963
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanReachLocCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CanReachLocKW(self):
            return self.getToken(LogicFileParser.CanReachLocKW, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def Comma(self):
            return self.getToken(LogicFileParser.Comma, 0)

        def Age(self):
            return self.getToken(LogicFileParser.Age, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_canReachLocCall




    def canReachLocCall(self):

        localctx = LogicFileParser.CanReachLocCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_canReachLocCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(LogicFileParser.CanReachLocKW)
            self.state = 966
            self.match(LogicFileParser.OPar)
            self.state = 967
            self.match(LogicFileParser.Ident)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 968
                self.match(LogicFileParser.Comma)
                self.state = 969
                self.match(LogicFileParser.Age)


            self.state = 972
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanReachEntranceCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CanReachEntranceKW(self):
            return self.getToken(LogicFileParser.CanReachEntranceKW, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def Comma(self):
            return self.getToken(LogicFileParser.Comma, 0)

        def Age(self):
            return self.getToken(LogicFileParser.Age, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_canReachEntranceCall




    def canReachEntranceCall(self):

        localctx = LogicFileParser.CanReachEntranceCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_canReachEntranceCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(LogicFileParser.CanReachEntranceKW)
            self.state = 975
            self.match(LogicFileParser.OPar)
            self.state = 976
            self.match(LogicFileParser.Ident)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 977
                self.match(LogicFileParser.Comma)
                self.state = 978
                self.match(LogicFileParser.Age)


            self.state = 981
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanReachRegionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CanReachRegionKW(self):
            return self.getToken(LogicFileParser.CanReachRegionKW, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def Comma(self):
            return self.getToken(LogicFileParser.Comma, 0)

        def Age(self):
            return self.getToken(LogicFileParser.Age, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_canReachRegionCall




    def canReachRegionCall(self):

        localctx = LogicFileParser.CanReachRegionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_canReachRegionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(LogicFileParser.CanReachRegionKW)
            self.state = 984
            self.match(LogicFileParser.OPar)
            self.state = 985
            self.match(LogicFileParser.Ident)
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 986
                self.match(LogicFileParser.Comma)
                self.state = 987
                self.match(LogicFileParser.Age)


            self.state = 990
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HasItemCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HasItemKW(self):
            return self.getToken(LogicFileParser.HasItemKW, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def Comma(self):
            return self.getToken(LogicFileParser.Comma, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def getRuleIndex(self):
            return LogicFileParser.RULE_hasItemCall




    def hasItemCall(self):

        localctx = LogicFileParser.HasItemCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_hasItemCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(LogicFileParser.HasItemKW)
            self.state = 993
            self.match(LogicFileParser.OPar)
            self.state = 994
            self.match(LogicFileParser.Ident)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 995
                self.match(LogicFileParser.Comma)
                self.state = 996
                self.expr(0)


            self.state = 999
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountItemCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CountItemKW(self):
            return self.getToken(LogicFileParser.CountItemKW, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_countItemCall




    def countItemCall(self):

        localctx = LogicFileParser.CountItemCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_countItemCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(LogicFileParser.CountItemKW)
            self.state = 1002
            self.match(LogicFileParser.OPar)
            self.state = 1003
            self.match(LogicFileParser.Ident)
            self.state = 1004
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsDungeonMqCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IsMQDungeonKW(self):
            return self.getToken(LogicFileParser.IsMQDungeonKW, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_isDungeonMqCall




    def isDungeonMqCall(self):

        localctx = LogicFileParser.IsDungeonMqCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_isDungeonMqCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(LogicFileParser.IsMQDungeonKW)
            self.state = 1007
            self.match(LogicFileParser.OPar)
            self.state = 1008
            self.match(LogicFileParser.Ident)
            self.state = 1009
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloorKW(self):
            return self.getToken(LogicFileParser.FloorKW, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_floorCall




    def floorCall(self):

        localctx = LogicFileParser.FloorCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_floorCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(LogicFileParser.FloorKW)
            self.state = 1012
            self.match(LogicFileParser.OPar)
            self.state = 1013
            self.expr(0)
            self.state = 1014
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CeilCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CeilKW(self):
            return self.getToken(LogicFileParser.CeilKW, 0)

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_ceilCall




    def ceilCall(self):

        localctx = LogicFileParser.CeilCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ceilCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(LogicFileParser.CeilKW)
            self.state = 1017
            self.match(LogicFileParser.OPar)
            self.state = 1018
            self.expr(0)
            self.state = 1019
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenExpr(self):
            return self.getTypedRuleContext(LogicFileParser.ParenExprContext,0)


        def Bool(self):
            return self.getToken(LogicFileParser.Bool, 0)

        def SignedNumber(self):
            return self.getToken(LogicFileParser.SignedNumber, 0)

        def enumValueRef(self):
            return self.getTypedRuleContext(LogicFileParser.EnumValueRefContext,0)


        def entranceRef(self):
            return self.getTypedRuleContext(LogicFileParser.EntranceRefContext,0)


        def regionRef(self):
            return self.getTypedRuleContext(LogicFileParser.RegionRefContext,0)


        def locRef(self):
            return self.getTypedRuleContext(LogicFileParser.LocRefContext,0)


        def itemRef(self):
            return self.getTypedRuleContext(LogicFileParser.ItemRefContext,0)


        def EscapedString(self):
            return self.getToken(LogicFileParser.EscapedString, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_value




    def value(self):

        localctx = LogicFileParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_value)
        try:
            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.parenExpr()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.match(LogicFileParser.Bool)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1023
                self.match(LogicFileParser.SignedNumber)
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1024
                self.enumValueRef()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1025
                self.entranceRef()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1026
                self.regionRef()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1027
                self.locRef()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1028
                self.itemRef()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1029
                self.match(LogicFileParser.EscapedString)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(LogicFileParser.OPar, 0)

        def expr(self):
            return self.getTypedRuleContext(LogicFileParser.ExprContext,0)


        def CPar(self):
            return self.getToken(LogicFileParser.CPar, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_parenExpr




    def parenExpr(self):

        localctx = LogicFileParser.ParenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_parenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(LogicFileParser.OPar)
            self.state = 1033
            self.expr(0)
            self.state = 1034
            self.match(LogicFileParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.Ident)
            else:
                return self.getToken(LogicFileParser.Ident, i)

        def Colon(self):
            return self.getToken(LogicFileParser.Colon, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_enumValueRef




    def enumValueRef(self):

        localctx = LogicFileParser.EnumValueRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_enumValueRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(LogicFileParser.Ident)
            self.state = 1037
            self.match(LogicFileParser.Colon)
            self.state = 1038
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntranceRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EntranceRefKW(self):
            return self.getToken(LogicFileParser.EntranceRefKW, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_entranceRef




    def entranceRef(self):

        localctx = LogicFileParser.EntranceRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_entranceRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(LogicFileParser.EntranceRefKW)
            self.state = 1041
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegionRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RegionRefKW(self):
            return self.getToken(LogicFileParser.RegionRefKW, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_regionRef




    def regionRef(self):

        localctx = LogicFileParser.RegionRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_regionRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(LogicFileParser.RegionRefKW)
            self.state = 1044
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LocRefKW(self):
            return self.getToken(LogicFileParser.LocRefKW, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_locRef




    def locRef(self):

        localctx = LogicFileParser.LocRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_locRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(LogicFileParser.LocRefKW)
            self.state = 1047
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ItemRefKW(self):
            return self.getToken(LogicFileParser.ItemRefKW, 0)

        def Ident(self):
            return self.getToken(LogicFileParser.Ident, 0)

        def getRuleIndex(self):
            return LogicFileParser.RULE_itemRef




    def itemRef(self):

        localctx = LogicFileParser.ItemRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_itemRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(LogicFileParser.ItemRefKW)
            self.state = 1050
            self.match(LogicFileParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListSeparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(LogicFileParser.Comma, 0)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(LogicFileParser.EOL)
            else:
                return self.getToken(LogicFileParser.EOL, i)

        def getRuleIndex(self):
            return LogicFileParser.RULE_listSeparator




    def listSeparator(self):

        localctx = LogicFileParser.ListSeparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_listSeparator)
        self._la = 0 # Token type
        try:
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.match(LogicFileParser.Comma)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 1053
                    self.match(LogicFileParser.Comma)


                self.state = 1057 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1056
                    self.match(LogicFileParser.EOL)
                    self.state = 1059 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==57):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[38] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         




